{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE BlockArguments #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE ApplicativeDo #-}
{-# OPTIONS_GHC -Wno-type-defaults #-}

-- |
-- This is adapted from https://jtobin.io/giry-monad-implementation
-- but brought into the monad-bayes framework (i.e. Integrator is an instance of MonadInfer)
-- It's largely for debugging other inference methods and didactic use, 
-- because brute force integration of measures is 
-- only practical for small programs


module Control.Monad.Bayes.Integrator 
  -- (probability,
  -- variance,
  -- expectation,
  -- cdf,
  -- empirical,
  -- enumerateWith,
  -- enumerateWithWeighted,
  -- histogram,
  -- plotCdf,
  -- volume,
  -- normalize,
  -- momentGeneratingFunction,
  -- cumulantGeneratingFunction,
  -- Integrator)
where

import Control.Monad.Trans.Cont
    ( cont, runCont, Cont, ContT(ContT) )
import Control.Monad.Bayes.Class (MonadSample (random, bernoulli, uniformD, beta, normal), factor, condition)
import Numeric.Integration.TanhSinh ( trap, Result(result) )
import Statistics.Distribution.Uniform qualified as Statistics
import Numeric.Log (Log(ln))
import Data.Set (Set, elems)
import Control.Foldl qualified as Foldl
import Control.Foldl (Fold)
import Control.Applicative (Applicative(..))
import Data.Foldable (Foldable(foldl'))
import Data.Text qualified as T
import Statistics.Distribution (density)
import Control.Monad.Bayes.Weighted (Weighted, runWeighted, prior)
import Data.Scientific (formatScientific, FPFormat (Exponent), fromFloatDigits)
import Control.Monad.Cont (MonadTrans (lift), replicateM, ContT (runContT))
import Control.Monad.Bayes.Sampler (SamplerIO, sampleIO)
import Control.Monad.Bayes.Enumerator hiding (expectation)
import Debug.Trace (trace)
import Control.Monad.Bayes.Traced (mh)


newtype Integrator a = Integrator {getCont :: Cont Double a}
  deriving newtype (Functor, Applicative, Monad)

runIntegrator :: (a -> Double) -> Integrator a -> Double
runIntegrator f (Integrator a) = runCont a f

instance MonadSample Integrator where
    random = fromDensityFunction $ density $ Statistics.uniformDistr 0 1
    bernoulli p = Integrator $ cont (\f -> p * f True + (1 -p) * f False)
    uniformD ls = fromMassFunction (const (1 / fromIntegral (length ls))) ls

fromDensityFunction :: (Double -> Double) -> Integrator Double
fromDensityFunction d = Integrator $ cont $ \f ->
    integralWithQuadrature (\x -> f x * d x)
  where
    integralWithQuadrature = result . last . (\z -> trap z 0 1)

fromMassFunction :: Foldable f => (a -> Double) -> f a -> Integrator a
fromMassFunction f support = Integrator $ cont \g ->
    foldl' (\acc x -> acc + f x * g x) 0 support

empirical :: Foldable f => f a -> Integrator a
empirical = Integrator . cont . flip weightedAverage where

    weightedAverage :: (Foldable f, Fractional r) => (a -> r) -> f a -> r
    weightedAverage f = Foldl.fold (weightedAverageFold f)

    weightedAverageFold :: Fractional r => (a -> r) -> Fold a r
    weightedAverageFold f = Foldl.premap f averageFold

    averageFold :: Fractional a => Fold a a
    averageFold = (/) <$> Foldl.sum <*> Foldl.genericLength

expectation :: Integrator Double -> Double
expectation = runIntegrator id

variance :: Integrator Double -> Double
variance nu = runIntegrator (^ 2) nu - expectation nu ^ 2

momentGeneratingFunction :: Integrator Double -> Double -> Double
momentGeneratingFunction nu t = runIntegrator (\x -> exp (t * x)) nu

cumulantGeneratingFunction :: Integrator Double -> Double -> Double
cumulantGeneratingFunction nu = log . momentGeneratingFunction nu

normalize :: Weighted Integrator a -> Integrator a
normalize m =
    let m' = runWeighted m
        z = runIntegrator (ln . exp . snd) m'
    in do
      (x, d) <- runWeighted m
      Integrator $ cont $ \f -> (f () * (ln $ exp d)) / z
      return x

cdf :: Integrator Double -> Double -> Double
cdf nu x = runIntegrator (negativeInfinity `to` x) nu where 

  negativeInfinity :: Double
  negativeInfinity = negate (1 / 0)

  to :: (Num a, Ord a) => a -> a -> a -> a
  to a b k
    | k >= a && k <= b = 1
    | otherwise        = 0

volume :: Integrator Double -> Double
volume = runIntegrator (const 1)

containing :: (Num a, Eq b) => [b] -> b -> a
containing xs x
  | x `elem` xs = 1
  | otherwise   = 0

instance Num a => Num (Integrator a) where
  (+)         = liftA2 (+)
  (-)         = liftA2 (-)
  (*)         = liftA2 (*)
  abs         = fmap abs
  signum      = fmap signum
  fromInteger = pure . fromInteger

probability :: Ord a => (a, a) -> Integrator a -> Double
probability (lower, upper) = runIntegrator (\x -> if x <upper && x  >= lower then 1 else 0)

enumerateWith :: Ord a => Set a -> Integrator a -> [(a, Double)]
enumerateWith ls meas = [(val, runIntegrator 
  (\x -> if x == val then 1 else 0) meas) 
  | val <- elems ls]

histogram :: (Enum a, RealFloat a) => 
  Int -> a -> Weighted Integrator a -> [(T.Text, Double)]
histogram nBins binSize model = do
    x <- take nBins [1..]
    let transform k = (k - (fromIntegral nBins / 2)) * binSize
    return (
      (T.pack . formatScientific Exponent (Just 2) . fromFloatDigits . fst) 
      (transform x,transform (x+1)), probability (transform x,transform (x+1)) $ normalize model)

plotCdf :: Int -> Double -> Integrator Double -> [(T.Text, Double)]
plotCdf nBins binSize model = do
    x <- take nBins [1..]
    let transform k = (k - (fromIntegral nBins / 2)) * binSize
    return ((T.pack . show) $  transform x, cdf model (transform x))
  



newtype IntegratorT m a = IntegratorT {getContT :: ContT Double m a}
  deriving newtype (Functor, Applicative, Monad, MonadTrans)

runIntegratorT :: (a -> m Double) -> IntegratorT m a -> m Double
runIntegratorT f (IntegratorT a) = runContT a f

fromDensityFunctionT :: (MonadSample m) => (Double -> m Double) -> IntegratorT m Double
fromDensityFunctionT d = IntegratorT $ ContT $ \f ->
    integralWithQuadrature (\x -> liftA2 (*) (f x) (d x))
  where
    integralWithQuadrature f = nIntegrate256 f 0 1

    baseCase :: (Fractional a, MonadSample m) => (a -> m a) -> [a] -> [a] -> m a
    baseCase func points weights = foldl' (liftA2 (+)) (pure 0) $ map (\(x,w) -> fmap (w*) (liftA2 (+) (func x) (func(-x)))) $ zip points weights

    nIntegrate256 :: (Fractional a, MonadSample m) => (a -> m a) -> a -> a -> m a
    nIntegrate256 func a b = 
      fmap (0.5*(b-a) *)
      (baseCase (\x -> func $ 0.5*((b-a)*x+b+a)) points256 weights256)


    points256 :: (Fractional a) => [a]
    points256 = [0.61239123751895295011701649622667416283944167028375E-2, 0.18370818478813665117926292060533780951234872377227E-1, 0.30614968779979029366278581321359033524628883631178E-1, 0.42854526536379098381242288682038493267923620603175E-1, 0.55087655694633984104561416424759146251113175578734E-1, 0.67312521165716400242290288816976949867919113220825E-1, 0.79527289100232965903227068456562955624700744501952E-1, 0.91730127163519552031145600597807478275868793445947E-1, 0.10391920481050940363919689655906955432731630625473E0, 0.11609269356033280494073486388685135297259392404511E0, 0.12824876727060709474204959621202949420919360524124E0, 0.14038560241137588591302487564066713348363498579596E0, 0.15250137833865639537460684066923625938093964626292E0, 0.16459427756755384982928450755534589986706394993936E0, 0.17666248604490199740372181525506961241648684561491E0, 0.18870419342138882646150357223383005981116648676585E0, 0.20071759332312667006800073061408500455582268960924E0, 0.21270088362262595793704015346308714340589356335363E0, 0.22465226670913196714787831631496188185579902038274E0, 0.23656994975828401847750840886927355630277455293954E0, 0.24845214500105666683324268886003748145469576270548E0, 0.26029706999194254197856085902387240009170284532371E0, 0.27210294787633660950524472329615434776190506849400E0, 0.28386800765708174179976576517066659703380003349974E0, 0.29559048446013561456378679563295999946950218737600E0, 0.30726861979931907625861025421971517798365754338124E0, 0.31890066184010627563168338215602191937399030900508E0, 0.33048486566241697622918703647332216253176192429383E0, 0.34201949352237163648072967415746404120572349133669E0, 0.35350281511296998953779015303793806869405875948229E0, 0.36493310782365401853346488051958559259471332515596E0, 0.37630865699871639028305571292105781909359319616690E0, 0.38762775619451558363798458808394186973353569971586E0, 0.39888870743545912771346321276048691521870377365352E0, 0.41008982146871655000643357484234282399863285801861E0, 0.42122941801762382497681237185195680262118383235308E0, 0.43230582603374130995344107214721202098774412071617E0, 0.44331738394752735721692575276001688848570014299644E0, 0.45426243991758999877445520109409260448643221439180E0, 0.46513935207847931364557045048089344722940685376222E0, 0.47594648878698330639073752308979932015697288461888E0, 0.48668222886689035010362141941046020005153523050747E0, 0.49734496185218147711951238535298428749154316752435E0, 0.50793308822861603623192491903253059434547992962886E0, 0.51844501967367447622166170963061101925400486799759E0, 0.52887917929482226195147641396434937217112303534071E0, 0.53923400186605918112793624407538195103304804049008E0, 0.54950793406271855704242688438840814844473762806097E0, 0.55969943469448114513690743112051076810649563007160E0, 0.56980697493656875905766753546542832558628539257469E0, 0.57982903855908294492183171211912733870228263576748E0, 0.58976412215445430078578614391181105726161434042804E0, 0.59961073536296832173038822663631381400295234816304E0, 0.60936740109633393952231084466027223703889116091632E0, 0.61903265575926121943096763429132158930430892397081E0, 0.62860504946901497543220986776732144741353826994117E0, 0.63808314627291136866868858338300695524915519870165E0, 0.64746552436372486261701622882855633856604264258219E0, 0.65675077629297322188750023539620890139147363425263E0, 0.66593750918204855990640841387737334555700170030981E0, 0.67502434493116276385591873153792494507769270871726E0, 0.68400992042607595312487710735248004815697978666229E0, 0.69289288774257696010534160635578220968086616262398E0, 0.70167191434868515940608354988336499027665912472636E0, 0.71034568330454331339456631697542218546759000524342E0, 0.71891289345997144837263985024789732026152337208396E0, 0.72737225964965212658689439814769827406775565129501E0, 0.73572251288591783462037285023489052496802394831108E0, 0.74396240054911156845568312157460754749097588484056E0, 0.75209068657549205958752972836807304618850985461778E0, 0.76010615164265545494190679754036519091504220810500E0, 0.76800759335244563597589060072857172634993413429533E0, 0.77579382641132573913205257458235971511028346275258E0, 0.78346368280818382075067020673854688858001308740779E0, 0.79101601198954599454670749798541719408590466180042E0, 0.79844968103217075878254286054894266984296675744413E0, 0.80576357481299862325738910468670375240045290189013E0, 0.81295659617643154313641043849537746154317418308555E0, 0.82002766609891706740347808182169744350546320574282E0, 0.82697572385081251428909289804726704280832768340079E0, 0.83379972715550489434844389998648589817415210494066E0, 0.84049865234576271389506799729185349455590286603322E0, 0.84707149451729620718707243278483518668126448708712E0, 0.85351726767950296507303553571390669021362412090932E0, 0.85983500490337635069617309784633364564237642775497E0, 0.86602375846655451929751543112307610856115679253999E0, 0.87208259999548828913004589956686325087354475784913E0, 0.87801062060470654398643486795167645533793043775033E0, 0.88380693103315828485982618173396077074128385803370E0, 0.88947066177761088882867658053429696999389179449227E0, 0.89500096322308457744122280000217194497163844030390E0, 0.90039700577030354477161999541586850502057181538670E0, 0.90565797996014464708268190580047775533921077081039E0, 0.91078309659506501189090720317907876614297769782818E0, 0.91577158685749038452666962656096174307133785437104E0, 0.92062270242514649550504708432344016623006111517738E0, 0.92533571558331620287273029185622774912260508928966E0, 0.92990991933400564118024555088087921019990699038964E0, 0.93434462750200309429247654276821820989138494420498E0, 0.93863917483781480498192608410649488907174150718713E0, 0.94279291711746244318307614063143330707200328440677E0, 0.94680523123912748137205172505174254554268258698693E0, 0.95067551531662827636385212471149035637379885550787E0, 0.95440318876971624176444794113960825876322345969397E0, 0.95798769241117812936579044649319661779288436760939E0, 0.96142848853073214400640746873595121272217210830900E0, 0.96472506097570643093261227968495390284859427158297E0, 0.96787691522848945490900377771025567416563999087318E0, 0.97088357848074302932092329972793925035287182188248E0, 0.97374459970437040526607855788912668465284574993286E0, 0.97645954971923415562101065175025355882115684755954E0, 0.97902802125762203882423803528311432616663373837881E0, 0.98144962902546440576930311415742062979409770541179E0, 0.98372400976031549616668611782075397395995211357069E0, 0.98585082228612595647924512386762187088467803586248E0, 0.98782974756486060891648771273218263525530070683203E0, 0.98966048874506521831924374726403618857076661281903E0, 0.99134277120758308692218851045609800871184562719304E0, 0.99287634260882211714353380232166929999834526008447E0, 0.99426097292240966496287754832372376884468245223735E0, 0.99549645448109635659264705278931262098867151298332E0, 0.99658260202338154043050442426970738086208320321444E0, 0.99751925275672082756340875863769169773980140180356E0, 0.99830626647300644405550048241824755416404972701380E0, 0.99894352584340885655502628978579727540639976060273E0, 0.99943093746626140824085418171105828177464937099404E0, 0.99976843740926318610487858551188302594151181041288E0, 0.99995605001899223073480121016841593607594150196605E0]
    weights256 :: (Fractional a) => [a]
    weights256 = [0.12247671640289755904070326489718441357289319116282E-1, 0.12245834369747920142463857549936169820190368979254E-1, 0.12242160104272800769728083260150024502982183048238E-1, 0.12236649395040158109242574767422466134351683338919E-1, 0.12229303068710278904146266083241341868106366467338E-1, 0.12220122227303969191708737227260657538067173925682E-1, 0.12209108248037240407514094370733193410841114106855E-1, 0.12196262783114713518180974196503676596947203009345E-1, 0.12181587759481772174047585031952371189770400962791E-1, 0.12165085378535502061307291838864378577396814563997E-1, 0.12146758115794459815559837664163480086300082677907E-1, 0.12126608720527321034718492204524083713705061103090E-1, 0.12104640215340463097757829736374619019153793954987E-1, 0.12080855895724544655975183975512735032708057163174E-1, 0.12055259329560149814347085327427818223887040037626E-1, 0.12027854356582571161267533497575234194680240163030E-1, 0.11998645087805811934536710070769260920371803910387E-1, 0.11967635904905893729007282669908797395829745294423E-1, 0.11934831459563562255873201696449805395631720817562E-1, 0.11900236672766489754287204237097415843987464580238E-1, 0.11863856734071078731904572907582780240389471274374E-1, 0.11825697100823977771160737958108142928720831534754E-1, 0.11785763497343426181690117626889147033641595283397E-1, 0.11744061914060550305376732758569478191961106575397E-1, 0.11700598606620740288189823359213664303239878152349E-1, 0.11655380094945242121298939730324051277607743835263E-1, 0.11608413162253105722084706677164471624546662574523E-1, 0.11559704854043635772668656950343378668590518336824E-1, 0.11509262477039497958586392438694805869226196767153E-1, 0.11457093598090639152334392298045711486207623630974E-1, 0.11403206043039185964847059552301069314142169653746E-1, 0.11347607895545491941625714296754056754258096339714E-1, 0.11290307495875509508367594121317280000800822203970E-1, 0.11231313439649668572656802083406848882198503071792E-1, 0.11170634576553449462710881938310534594887652932770E-1, 0.11108280009009843630460815450696805082227598466917E-1, 0.11044259090813901263517571043645709041714685158123E-1, 0.10978581425729570637988203447697642429855290289419E-1, 0.10911256866049039700796847787581143082132576501666E-1, 0.10842295511114795995293477058352670049192978393331E-1, 0.10771707705804626636653631927164389072139816141912E-1, 0.10699504038979785603048200582680365782037587177624E-1, 0.10625695341896561133961681801372570530388854894443E-1, 0.10550292686581481517533575535981684840463872141702E-1, 0.10473307384170403003569566926726888287055001604798E-1, 0.10394750983211728997101725205264906768817374366292E-1, 0.10314635267934015068260713997271114153135564841855E-1, 0.10232972256478219656954857160445751971577075871678E-1, 0.10149774199094865654634066041913717424808079932463E-1, 0.10065053576306383309460978929553044922157809869128E-1, 0.99788230970349101247339494945829857614781266932767E-2, 0.98910956966958286026306838091818183383451552087777E-2, 0.98018845352573278254988002499784197494806010060819E-2, 0.97112029952662799642496704958133881943539697903158E-2, 0.96190646798407278571621644005228782173613581004622E-2, 0.95254834106292848118296857544337562813246052337690E-2, 0.94304732257377527473527644823685136199994418195010E-2, 0.93340483776232697124660144863569647322708861654666E-2, 0.92362233309563026873787167138559912648438061393497E-2, 0.91370127604508064020004722186818900160042916735758E-2, 0.90364315486628736802277755723881340895839525491545E-2, 0.89344947837582075484084170849470145800136168445811E-2, 0.88312177572487500253182726851198485927537871623959E-2, 0.87266159616988071403366322173564383309686971550752E-2, 0.86207050884010143053688384101831795750837227228984E-2, 0.85135010250224906938383547896972066036472254227373E-2, 0.84050198532215357561803016981579414858146132272272E-2, 0.82952778462352254251714125528806369120604672977010E-2, 0.81842914664382699356197610037208479978882773035144E-2, 0.80720773628734995009469748041345859560208212541477E-2, 0.79586523687543483536131612269358707447223239277417E-2, 0.78440334989397118668103161512163958132516291630067E-2, 0.77282379473815556311101949578370003065005479422585E-2, 0.76112830845456594616187196180351736095405843779516E-2, 0.74931864548058833585997611333180813499799873311566E-2, 0.73739657738123464375724406946886802762121673013846E-2, 0.72536389258339137838291372141815820937997889148837E-2, 0.71322239610753900716724229855198009861035132321838E-2, 0.70097390929698226212344361936836053401261375493058E-2, 0.68862026954463203467133237745326538597343965052443E-2, 0.67616333001737987809278611078831562586743888701359E-2, 0.66360495937810650445900383550712941061772608598214E-2, 0.65094704150536602678098999513797395837762707119522E-2, 0.63819147521078805703751642749437599762617954325503E-2, 0.62534017395424012720636459752508788876811539398733E-2, 0.61239506555679325423890811865978216894838893277061E-2, 0.59935809191153382211276968703629409813527781216953E-2, 0.58623120869226530606615988010922066363605177277724E-2, 0.57301638506014371773844175553933482243939981188957E-2, 0.55971560336829100775514452571861567091385408316658E-2, 0.54633085886443102775705318566331407345646327397549E-2, 0.53286415939159303170811114787921916315402582881455E-2, 0.51931752508692809303287536296395491697483528968455E-2, 0.50569298807868423875578160762127732081888274550991E-2, 0.49199259218138656695587765654885346402453290530591E-2, 0.47821839258926913729317340447629393195315961673138E-2, 0.46437245556800603139790923524727643675520210155556E-2, 0.45045685814478970686417923159232943226931021783438E-2, 0.43647368779680566815684200621184902908416772687477E-2, 0.42242504213815362723565049059879534049520515874816E-2, 0.40831302860526684085997759211876512533974179430532E-2, 0.39413976414088336277290349839951457051686057737779E-2, 0.37990737487662579981170192082427333239264943681325E-2, 0.36561799581425021693892413052172391171899024418859E-2, 0.35127377050563073309710549844292120362296938478300E-2, 0.33687685073155510120191062489271222650695734804103E-2, 0.32242939617941981570107134268773184605561737173314E-2, 0.30793357411993375832053528315846673787879880952328E-2, 0.29339155908297166460123254142190697581125272313259E-2, 0.27880553253277068805747610762479015590819267299592E-2, 0.26417768254274905641208292515829908350109732552030E-2, 0.24951020347037068508395354372042878681588448169119E-2, 0.23480529563273120170064609086914591360569299944607E-2, 0.22006516498399104996848834188637758172437796526996E-2, 0.20529202279661431745487818492016008096852322997392E-2, 0.19048808534997184044191411745842359580220133834298E-2, 0.17565557363307299936069145295177919220870870472167E-2, 0.16079671307493272424499395689839033290752649485672E-2, 0.14591373333107332010883864995774136975249580555853E-2, 0.13100886819025044578316804270622154252327292513251E-2, 0.11608435575677247239705981134606057217156375453822E-2, 0.10114243932084404526058128414253749773751779026284E-2, 0.86185370142008903781409341625096877589142373737770E-3, 0.71215416347332066690898915112339015019714155627320E-3, 0.56234895403140980281523674759270532885648274980856E-3, 0.41246325442617632843218583773587079928343893889925E-3, 0.26253494429644590628745756249949673272472953725717E-3, 0.11278901782227217551253887724983760559023505127875E-3]


instance MonadSample m => MonadSample (IntegratorT m) where
    random = fromDensityFunctionT $ return . density (Statistics.uniformDistr 0 1)
    bernoulli p = IntegratorT $ ContT (\f -> do 
        tr <- f True
        fa <- f False
        pure $ p * tr +  (1 - p) * fa)

      -- bernoulli p = Integrator $ cont (\f -> p * f True + (1 -p) * f False)
    -- uniformD ls = fromMassFunction (const (1 / fromIntegral (length ls))) ls






sample :: SamplerIO a -> IntegratorT SamplerIO a
sample = lift 

-- testOut = sampleIO $ runIntegratorT return (model)
testOut2 = sampleIO $ runIntegratorT return model1 

model1 = do
  x <- beta 1 1
  y <- sample $ replicateM 10 $ bernoulli x
  return (fromIntegral $ length (filter id y))

-- model :: IntegratorT SamplerIO Double
-- model = do
--   x <- (normal 0 1)
--   y <- sample $ normal x 1
--   return y

model4 :: Integrator Double
model4 = do
  x <- bernoulli 0.5
  bernoulli 0.5
  if x then 0 else 1
  
run2 = runIntegrator id model4

-- model :: IntegratorT Enumerator Double
-- model = do
--   x <- random 
--   y <- random
--   condition (x > 0.9 && y > 0.9)
--   return (x,y)
  
model = do
  p <- id $ bernoulli 0.5
  lift $ bernoulli $ if True then 0.7 else 0.3
  -- bernoulli 0.5
  -- fmap (\x -> if x then 1 else 0) $ 
  -- y <- random --  (bernoulli :: Double -> IntegratorT Enumerator Bool) 0.5
  -- return $ x
  -- lift $ bernoulli 0.5
  -- x <- marginalize $ bernoulli 0.5
  -- return (0)

-- run = sampleIO $ prior $ mh 100 model

-- run = sampleIO $ runIntegratorT (\x -> return if x==(False,False) then 1 else 0) model

-- run :: [(Double, Double)]
run = enumerate $ runIntegratorT (\x -> return if x==(True) then 1 else 0) model

marginalize :: IntegratorT m a -> IntegratorT m a
marginalize = id